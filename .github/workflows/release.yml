name: Create Release
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "*-shelf*"
permissions:
  contents: write
  packages: read
env:
  DEV_ENVIRONMENT: false
jobs:
  info:
    name: Project Info
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.check.outputs.project_version }}
      project_name: ${{ steps.check.outputs.project_name }}
      project_full_name: ${{ steps.check.outputs.project_name }}-${{ steps.check.outputs.project_version }}
      changelog: ${{ steps.changelog.outputs.description }}
      mc_version: ${{ steps.check.outputs.minecraft_version }}
      loader_version: ${{ steps.check.outputs.loader_version }}
      loader_type: ${{ steps.check.outputs.loader_type }}
      release_type: ${{ steps.check.outputs.release_type }}
      diff: ${{ steps.read_diff.outputs.diff }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
      - name: Check pakku-lock.json
        id: check_pakku_lock
        shell: bash
        run: |
          if [ ! -f pakku-lock.json ]; then
            echo "Could not find pakku-lock.json" && exit 1
          fi
      - name: Check pakku.json
        id: check_pakku
        shell: bash
        run: |
          if [ ! -f pakku.json ]; then
            echo "Could not find pakku.json" && exit 1
          fi
      - name: Get latest upstream tag
        id: latest_tag
        shell: bash
        run: |
          tag=$(git tag --list --sort=-creatordate | grep -v -- '-shelf' | head -n1)
          if [ -z "$tag" ]; then
            echo "Latest upstream tag not found" && exit 1
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Check pakku-lock.json in previous tag
        id: check_pakku_lock_prev
        shell: bash
        run: |
          if git cat-file -e ${{ steps.latest_tag.outputs.tag }}:./pakku-lock.json 2>/dev/null; then
            echo "file_found=true" >> $GITHUB_OUTPUT
          else
            echo "file_found=false" >> $GITHUB_OUTPUT
          fi
      - name: Copy pakku-lock.json from previous tag
        id: check_copy_lock
        if: steps.check_pakku_lock_prev.outputs.file_found == 'true'
        shell: bash
        run: |
          git show tags/${{ steps.latest_tag.outputs.tag }}:./pakku-lock.json > ./pakku-lock-prev.json
          if [ ! -s ./pakku-lock-prev.json ]; then
            echo "Error: File pakku-lock-prev.json is empty or not created" && exit 1
          fi
      - name: Download pakku.jar
        id: download_pakku
        if: steps.check_pakku_lock_prev.outputs.file_found == 'true'
        shell: bash
        run: |
          curl -L -o pakku.jar https://github.com/juraj-hrivnak/pakku/releases/latest/download/pakku.jar
      - name: Run pakku diff
        id: pakku_diff
        if: steps.check_pakku_lock_prev.outputs.file_found == 'true'
        shell: bash
        run: |
          java -jar pakku.jar diff -v --markdown PROJECTS_DIFF.md ./pakku-lock-prev.json ./pakku-lock.json
          if [ ! -f PROJECTS_DIFF.md ]; then
            echo "Error: File PROJECTS_DIFF.md not created" && exit 1
          fi
      - name: Read PROJECTS_DIFF.md to variable
        id: read_diff
        if: steps.check_pakku_lock_prev.outputs.file_found == 'true'
        shell: bash
        run: |
          {
            echo 'diff<<EOF'
            cat -v PROJECTS_DIFF.md
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Get Pakku Info
        id: pakku_info
        uses: ActionsTools/read-json-action@v1.0.5
        with:
          file_path: "pakku.json"
      - name: Get Pakku-lock Info
        id: pakku_lock_info
        uses: ActionsTools/read-json-action@v1.0.5
        with:
          file_path: "pakku-lock.json"
      - name: Changelog Parser
        id: changelog
        uses: coditory/changelog-parser@v1.0.2
        with:
          path: CHANGELOG.md
        continue-on-error: true
      - name: Check
        id: check
        shell: bash
        run: |
          MC_VERSIONS_JSON='${{ steps.pakku_lock_info.outputs.mc_versions }}'
          MINECRAFT_VERSION=$(echo "$MC_VERSIONS_JSON" | jq -r '.[0]' | tr -d '[]"')
          LOADERS_JSON='${{ steps.pakku_lock_info.outputs.loaders }}'
          LOADER_TYPE=$(echo "$LOADERS_JSON" | jq -r 'keys[0]')
          LOADER_VERSION=$(echo "$LOADERS_JSON" | jq -r ".[keys[0]]")
          echo "minecraft_version=$MINECRAFT_VERSION" >> $GITHUB_OUTPUT
          echo "loader_version=$LOADER_VERSION" >> $GITHUB_OUTPUT
          echo "loader_type=$LOADER_TYPE" >> $GITHUB_OUTPUT
          echo "project_version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "project_name=${{ steps.pakku_info.outputs.name }}" >> $GITHUB_OUTPUT
          echo "release_type=${{ steps.pakku_info.outputs.release_type }}" >> $GITHUB_OUTPUT
  build-project:
    name: Build Project
    needs: [info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Replace strings
        shell: bash
        run: |
          VERSION=${{ needs.info.outputs.project_version }}
          LOADER_VERSION=${{ needs.info.outputs.loader_version }}
          LOADER_TYPE=${{ needs.info.outputs.loader_type }}
          MINECRAFT_VERSION=${{ needs.info.outputs.mc_version }}
          sed -i -e "s#DEV#${VERSION}#g" pakku.json
          sed -i -e "s#DEV#${VERSION}#g" config/fancymenu/customization/gui_main_menu.txt
          sed -i -e "s#DEV#${VERSION}#g" .pakku/multimc-overrides/instance.cfg
          sed -i -e "s#LOADER_VERSION#${LOADER_VERSION}#g" .pakku/multimc-overrides/mmc-pack.json
          sed -i -e "s#LOADER_TYPE#${LOADER_TYPE}#g" .pakku/multimc-overrides/mmc-pack.json
          sed -i -e "s#MINECRAFT_VERSION#${MINECRAFT_VERSION}#g" .pakku/multimc-overrides/mmc-pack.json
          sed -i -e "s#LOADER_VERSION#${LOADER_VERSION}#g" .pakku/server-overrides/forge-auto-install.txt
          sed -i -e "s#LOADER_TYPE#${LOADER_TYPE}#g" .pakku/server-overrides/forge-auto-install.txt
          sed -i -e "s#MINECRAFT_VERSION#${MINECRAFT_VERSION}#g" .pakku/server-overrides/forge-auto-install.txt
      - name: Cache pakku
        uses: actions/cache@v4.2.4
        id: cache
        with:
          path: build/.cache
          key: pakku-cache-${{ hashFiles('pakku-lock.json') }}
          restore-keys: pakku-cache-
      - name: Export modpack
        run: |
          curl -L -o pakku.jar https://github.com/juraj-hrivnak/pakku/releases/latest/download/pakku.jar
          java -jar pakku.jar fetch
          java -jar pakku.jar export
          mkdir -p .pakku/multimc-overrides/flame
          mkdir -p .pakku/multimc-overrides/mods
      - name: Prepare artifact curseforge
        run: |
          cd ./build/curseforge/
          mv *.zip $(basename -s .zip *.zip)-curseforge.zip
      - name: Upload artifact CurseForge
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-curseforge
          path: ./build/curseforge/${{ needs.info.outputs.project_full_name }}-curseforge.zip
          if-no-files-found: error
      - name: Prepare artifact modrinth
        run: |
          cd ./build/modrinth/
          mv *.mrpack $(basename -s .mrpack *.mrpack)-modrinth.mrpack
      - name: Upload artifact modrinth
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-modrinth
          path: ./build/modrinth/${{ needs.info.outputs.project_full_name }}-modrinth.mrpack
          if-no-files-found: warn
      - name: Prepare artifact multimc
        run: |
          mkdir -p .pakku/multimc-overrides/flame
          mkdir -p .pakku/multimc-overrides/mods
          mv -vf .pakku/multimc-overrides ./build/multimc
          cp -vf ./build/.cache/curseforge/manifest.json ./build/multimc/flame/manifest.json
          cp -rf ./build/.cache/curseforge/overrides ./build/multimc/.minecraft
          cp -rf ./mods ./build/multimc/.minecraft/
          cd ./build/multimc/
          zip -r ${{ needs.info.outputs.project_full_name }}-multimc.zip icon.png mmc-pack.json instance.cfg .minecraft/ flame/
      - name: Upload artifact multimc
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-multimc
          path: ./build/multimc/${{ needs.info.outputs.project_full_name }}-multimc.zip
          if-no-files-found: error
      - name: Prepare artifact server
        run: |
          cd ./build/serverpack/
          mv *.zip $(basename -s .zip *.zip)-serverpack.zip
      - name: Upload artifact server
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-serverpack
          path: ./build/serverpack/${{ needs.info.outputs.project_full_name }}-serverpack.zip
          if-no-files-found: error
  prerelease-artifacts:
    name: Prerelease Artifacts
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main') &&
      !startsWith(github.ref, 'refs/tags/')
    needs: [info, build-project]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v5.0.0
        with:
          merge-multiple: true
      - name: Check if artifact exist
        id: check_artifact
        shell: bash
        run: |
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-curseforge.zip ]; then
            echo 'No value found for artifact curseforge.zip.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-serverpack.zip ]; then
            echo 'No value found for artifact serverpack.zip.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-multimc.zip ]; then
            echo 'No value found for artifact multimc.zip.' && exit 1
          fi
      - name: Upload prerelease artifact CurseForge
        uses: actions/upload-artifact@v4.6.2
        with:
          name: prerelease-${{ needs.info.outputs.project_full_name }}-curseforge
          path: ./build/curseforge/${{ needs.info.outputs.project_full_name }}-curseforge.zip
          if-no-files-found: error
      - name: Upload prerelease artifact modrinth
        uses: actions/upload-artifact@v4.6.2
        with:
          name: prerelease-${{ needs.info.outputs.project_full_name }}-modrinth
          path: ./build/modrinth/${{ needs.info.outputs.project_full_name }}-modrinth.mrpack
          if-no-files-found: warn
      - name: Upload prerelease artifact multimc
        uses: actions/upload-artifact@v4.6.2
        with:
          name: prerelease-${{ needs.info.outputs.project_full_name }}-multimc
          path: ./build/multimc/${{ needs.info.outputs.project_full_name }}-multimc.zip
          if-no-files-found: error
      - name: Upload prerelease artifact server
        uses: actions/upload-artifact@v4.6.2
        with:
          name: prerelease-${{ needs.info.outputs.project_full_name }}-serverpack
          path: ./build/serverpack/${{ needs.info.outputs.project_full_name }}-serverpack.zip
          if-no-files-found: error
  release-github:
    name: Release to GitHub
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    needs: [info, build-project]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Download artifact
        uses: actions/download-artifact@v5.0.0
        with:
          merge-multiple: true
      - name: Check if artifact exist
        id: check_artifact
        shell: bash
        run: |
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-curseforge.zip ]; then
            echo 'No value found for artifact curseforge.zip.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-serverpack.zip ]; then
            echo 'No value found for artifact serverpack.zip.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-multimc.zip ]; then
            echo 'No value found for artifact multimc.zip.' && exit 1
          fi
      - name: Format release title
        id: release_title
        run: |
          TAG="${{ needs.info.outputs.project_version }}"
          DATE=$(date +'%Y-%m-%d')
          echo "title=Release $TAG ($DATE)" >> $GITHUB_OUTPUT
      - name: Sanitize changelog
        id: sanitize_changelog
        run: |
          echo "${{ needs.info.outputs.changelog }}" | sed -E 's/@([a-zA-Z0-9_-]+)/`@\1`/g' > sanitized_changelog.md
          echo "sanitized<<EOF" >> $GITHUB_OUTPUT
          cat sanitized_changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create release
        id: release
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: ${{ steps.release_title.outputs.title }}
          tag_name: ${{ needs.info.outputs.project_version }}
          body: |
            ${{ steps.sanitize_changelog.outputs.sanitized }}
            ${{ needs.info.outputs.diff }}
          files: |
            ${{ needs.info.outputs.project_full_name }}-curseforge.zip
            ${{ needs.info.outputs.project_full_name }}-modrinth.mrpack
            ${{ needs.info.outputs.project_full_name }}-serverpack.zip
            ${{ needs.info.outputs.project_full_name }}-multimc.zip
          prerelease: ${{ needs.info.outputs.release_type != 'release' }}
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}
