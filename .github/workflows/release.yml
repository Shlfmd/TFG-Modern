name: Release Modpack
run-name: "Release Modpack #${{ github.run_number }}"
on:
  push:
    branches:
      - main
    tags:
      - "*"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  DEV_ENVIRONMENT: ${{ github.ref_name != 'main' }}
jobs:
  info:
    name: Project Info
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'Shlfmd' }}
    outputs:
      project_version: ${{ steps.check.outputs.project_version }}
      project_name: ${{ steps.check.outputs.project_name }}
      project_full_name: ${{ steps.check.outputs.project_name }}-${{ steps.check.outputs.project_version }}
      changelog: ${{ steps.sanitized_changelog.outputs.sanitized }}
      mc_version: ${{ steps.check.outputs.minecraft_version }}
      loader_version: ${{ steps.check.outputs.loader_version }}
      loader_type: ${{ steps.check.outputs.loader_type }}
      release_type: ${{ steps.check.outputs.release_type }}
      diff: ${{ steps.read_diff.outputs.diff }}
      exists: ${{ steps.check.outputs.exists }}
      make_release: ${{ steps.check.outputs.make_release }}
      make_pr: ${{ steps.check.outputs.make_pr }}
      tag_name: ${{ steps.tag.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
      - name: Check pakku-lock.json
        id: check_pakku_lock
        shell: bash
        run: |
          if [ ! -f pakku-lock.json ]; then
            echo "Could not find pakku-lock.json" && exit 1
          fi
      - name: Check pakku.json
        id: check_pakku
        shell: bash
        run: |
          if [ ! -f pakku.json ]; then
            echo "Could not find pakku.json" && exit 1
          fi
      - name: Ensure tags are up to date
        shell: bash
        run: |
          git tag -l | xargs -r git tag -d
          git fetch --tags
      - name: Get latest tag
        id: latest_tag
        shell: bash
        run: |
          git fetch origin main --tags
          tag=$(git describe --tags --abbrev=0 origin/main)
          if [ -z "$tag" ]; then
            echo "Latest tag not found" && exit 1
          else
            echo "tag=$tag" >> $GITHUB_OUTPUT
          fi
      - name: Check pakku-lock.json in previous tag
        id: check_pakku_lock_prev
        shell: bash
        run: |
          if git cat-file -e ${{ steps.latest_tag.outputs.tag }}:./pakku-lock.json 2>/dev/null; then
            echo "file_found=true" >> $GITHUB_OUTPUT
          else
            echo "file_found=false" >> $GITHUB_OUTPUT
          fi
      - name: Check and copy pakku-lock.json from previous tag
        id: check_copy_lock
        if: steps.check_pakku_lock_prev.outputs.file_found
        shell: bash
        run: |
          git show tags/${{ steps.latest_tag.outputs.tag }}:./pakku-lock.json > ./pakku-lock-prev.json
          if [ ! -s ./pakku-lock-prev.json ]; then
            echo "Error: File pakku-lock-prev.json is empty or not created" && exit 1
          fi
      - name: Download pakku.jar
        id: download_pakku
        if: steps.check_pakku_lock_prev.outputs.file_found
        shell: bash
        run: |
          curl https://github.com/juraj-hrivnak/pakku/releases/latest/download/pakku.jar -o pakku.jar -L -J
      - name: Run pakku diff
        id: pakku_diff
        if: steps.check_pakku_lock_prev.outputs.file_found
        shell: bash
        run: |
          java -jar pakku.jar diff -v --markdown PROJECTS_DIFF.md ./pakku-lock-prev.json ./pakku-lock.json
          if [ ! -f PROJECTS_DIFF.md ]; then
            echo "Error: File PROJECTS_DIFF.md not created" && exit 1
          fi
      - name: Read PROJECTS_DIFF.md to variable
        id: read_diff
        if: steps.check_pakku_lock_prev.outputs.file_found
        shell: bash
        run: |
          {
            echo 'diff<<EOF'
            cat -v PROJECTS_DIFF.md
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Get Pakku Info
        id: pakku_info
        uses: ActionsTools/read-json-action@v1.0.5
        with:
          file_path: "pakku.json"
      - name: Get Pakku-lock Info
        id: pakku_lock_info
        uses: ActionsTools/read-json-action@v1.0.5
        with:
          file_path: "pakku-lock.json"
      - name: Changelog Dev Parser
        id: changelog_dev
        if: ${{ env.DEV_ENVIRONMENT == 'true' }}
        uses: coditory/changelog-parser@v1.0.2
        with:
          path: CHANGELOG.md
          version: "unreleased"
        continue-on-error: true
      - name: Changelog Parser
        id: changelog
        uses: coditory/changelog-parser@v1.0.2
        with:
          path: CHANGELOG.md
        continue-on-error: true
      - name: Check if tag exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: check_tag
        with:
          tag: ${{ steps.changelog.outputs.version }}
      - name: Check
        id: check
        shell: bash
        run: |
          MC_VERSIONS_JSON='${{ steps.pakku_lock_info.outputs.mc_versions }}'
          MINECRAFT_VERSION=$(echo "$MC_VERSIONS_JSON" | jq -r '.[0]' | tr -d '[]"')

          LOADERS_JSON='${{ steps.pakku_lock_info.outputs.loaders }}'

          LOADER_TYPE=$(echo "$LOADERS_JSON" | jq -r 'keys[0]')
          LOADER_VERSION=$(echo "$LOADERS_JSON" | jq -r ".[keys[0]]")

          echo "minecraft_version=$MINECRAFT_VERSION" >> $GITHUB_OUTPUT
          echo "loader_version=$LOADER_VERSION" >> $GITHUB_OUTPUT
          echo "loader_type=$LOADER_TYPE" >> $GITHUB_OUTPUT

          if ${{ env.DEV_ENVIRONMENT == 'true' }}; then
            echo "project_version=build_#${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "project_version=${{ steps.changelog.outputs.version }}" >> $GITHUB_OUTPUT
          fi

          echo "project_name=${{ steps.pakku_info.outputs.name }}" >> $GITHUB_OUTPUT
          echo "release_type=${{ steps.pakku_info.outputs.release_type }}" >> $GITHUB_OUTPUT
          echo "exists=${{ steps.check_tag.outputs.exists }}" >> $GITHUB_OUTPUT
          echo "make_release=${{ contains(github.ref, '-shelf') }}" >> $GITHUB_OUTPUT
          echo "make_pr=${{ steps.check_tag.outputs.exists  == 'false'  && env.DEV_ENVIRONMENT == 'true' }}" >> $GITHUB_OUTPUT
      - name: Sanitize changelog (remove @mentions and upstream pings)
        id: sanitized_changelog
        shell: bash
        run: |
          # Remove @mentions, #issue refs, and upstream repo pings
          echo "${{ steps.changelog.outputs.description }}" | \
            sed -E 's/@[a-zA-Z0-9_-]+//g' | \
            sed -E 's/#[0-9]+//g' | \
            sed -E 's|https://github.com/[^ ]+||g' \
            > sanitized_changelog.md
          {
            echo 'sanitized<<EOF'
            cat sanitized_changelog.md
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Initiate Downstream Releases
        id: tag
        shell: bash
        run: |
          set -e
          CURRENT_TAG="${GITHUB_REF##*/}"
          # If running on a -shelf<n> tag, proceed to release
          if [[ "$CURRENT_TAG" == *-shelf* ]]; then
            TAG="$CURRENT_TAG"
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Otherwise, generate and push the next -shelf<n> tag for this version
          # Find all tags for this version with -shelf suffix
          VERSION_TAG="$CURRENT_TAG"
          EXISTING=$(git tag --list "${VERSION_TAG}-shelf*")
          if [[ -z "$EXISTING" ]]; then
            TAG="${VERSION_TAG}-shelf1"
          else
            MAX=0
            for t in $EXISTING; do
              n=$(echo "$t" | sed -E "s/^${VERSION_TAG}-shelf([0-9]+)$/\1/")
              if [[ "$n" =~ ^[0-9]+$ ]] && (( n > MAX )); then
                MAX=$n
              fi
            done
            TAG="${VERSION_TAG}-shelf$((MAX+1))"
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/Shlfmd/TFG-Modern.git
          git tag "$TAG"
          git push origin "$TAG"
          echo "Downstream -shelf tag $TAG created. Exiting workflow."
          exit 0
      - name: Format diff
        id: format_diff
        if: ${{ steps.read_diff.outputs.diff != '' }}
        uses: roamingowl/template-output-with-eta@v1.13.0
        with:
          template: |
            ```markdown
            ${{ steps.read_diff.outputs.diff }}
            ```
      - name: Generate Github Summary
        uses: WcAServices/markdown-template-action@v1.1.1
        with:
          template: |
            **Name**: ${{ steps.check.outputs.project_name }}
            **Release**:  `${{ steps.check.outputs.project_version }}`
            **Release Type**: `${{ steps.check.outputs.release_type }}`
            **Game Version**: `${{ steps.check.outputs.minecraft_version }}`
            **Loader Type**: `${{ steps.check.outputs.loader_type }}`
            **Loader Version**: `${{ steps.check.outputs.loader_version }}`

            **Dev Environment**: `${{ env.DEV_ENVIRONMENT }}`
            **Tag Exists**: `${{ steps.check.outputs.exists }}`
            **Make Pull Request**: `${{ steps.check.outputs.make_pr }}`
            **Make Release**: `${{ steps.check.outputs.make_release }}`

            ${{ steps.changelog_dev.outputs.description }}
            ${{ steps.format_diff.outputs.text }}
  build-project:
    name: Build Project
    needs: [info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Replace strings
        shell: bash
        run: |
          set +e

          VERSION=${{ needs.info.outputs.project_version }}
          LOADER_VERSION=${{ needs.info.outputs.loader_version }}
          LOADER_TYPE=${{ needs.info.outputs.loader_type }}
          MINECRAFT_VERSION=${{ needs.info.outputs.mc_version }}

          sed -i -e "s/DEV/${VERSION}/g" pakku.json
          sed -i -e "s/DEV/${VERSION}/g" config/fancymenu/customization/gui_main_menu.txt

          sed -i -e "s/DEV/${VERSION}/g" .pakku/multimc-overrides/instance.cfg
          sed -i -e "s/LOADER_VERSION/${LOADER_VERSION}/g" .pakku/multimc-overrides/mmc-pack.json
          sed -i -e "s/LOADER_TYPE/${LOADER_TYPE}/g" .pakku/multimc-overrides/mmc-pack.json
          sed -i -e "s/MINECRAFT_VERSION/${MINECRAFT_VERSION}/g" .pakku/multimc-overrides/mmc-pack.json

          sed -i -e "s/LOADER_VERSION/${LOADER_VERSION}/g" .pakku/server-overrides/forge-auto-install.txt
          sed -i -e "s/LOADER_TYPE/${LOADER_TYPE}/g" .pakku/server-overrides/forge-auto-install.txt
          sed -i -e "s/MINECRAFT_VERSION/${MINECRAFT_VERSION}/g" .pakku/server-overrides/forge-auto-install.txt
      - name: Cache pakku
        uses: actions/cache@v4.2.4
        id: cache
        with:
          path: build/.cache
          key: pakku-cache-${{ hashFiles('pakku-lock.json') }}
          restore-keys: pakku-cache-
      - name: Export modpack
        run: |
          curl https://github.com/juraj-hrivnak/pakku/releases/latest/download/pakku.jar -o pakku.jar -L -J
          java -jar pakku.jar fetch
          java -jar pakku.jar export

          mkdir -p .pakku/multimc-overrides/flame
          mkdir -p .pakku/multimc-overrides/mods
      - name: Preparing the artifact curseforge
        run: |
          cd ./build/curseforge/
          for f in *.zip; do
            [ -e "$f" ] || continue
            base="${f%.zip}"
            mv "$f" "${base}-curseforge.zip"
          done
      - name: Upload artifact CurseForge
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-curseforge
          path: ./build/curseforge/${{ needs.info.outputs.project_full_name }}-curseforge.zip
          if-no-files-found: error
      - name: Preparing the artifact modrinth
        run: |
          cd ./build/modrinth/
          for f in *.mrpack; do
            [ -e "$f" ] || continue
            base="${f%.mrpack}"
            mv "$f" "${base}-modrinth.mrpack"
          done
      - name: Upload artifact modrinth
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-modrinth
          path: ./build/modrinth/${{ needs.info.outputs.project_full_name }}-modrinth.mrpack
          if-no-files-found: warn
      - name: Preparing the artifact multimc
        run: |
          mkdir -p .pakku/multimc-overrides/flame
          mkdir -p .pakku/multimc-overrides/mods

          mv -vf .pakku/multimc-overrides ./build/multimc

          cp -vf ./build/.cache/curseforge/manifest.json ./build/multimc/flame/manifest.json

          cp -rf ./build/.cache/curseforge/overrides ./build/multimc/.minecraft
          cp -rf ./mods ./build/multimc/.minecraft/

          cd ./build/multimc/
          zip -r ${{ needs.info.outputs.project_full_name }}-multimc.zip icon.png mmc-pack.json instance.cfg .minecraft/ flame/
      - name: Upload artifact multimc
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-multimc
          path: ./build/multimc/${{ needs.info.outputs.project_full_name }}-multimc.zip
          if-no-files-found: error
      - name: Preparing the artifact server
        run: |
          cd ./build/serverpack/
          for f in *.zip; do
            [ -e "$f" ] || continue
            base="${f%.zip}"
            mv "$f" "${base}-serverpack.zip"
          done
      - name: Upload artifact server
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ needs.info.outputs.project_full_name }}-serverpack
          path: ./build/serverpack/${{ needs.info.outputs.project_full_name }}-serverpack.zip
          if-no-files-found: error
  release-github:
    name: Release to GitHub
    needs: [info, build-project]
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, '-shelf') }}
    outputs:
      url: ${{ steps.release.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Download artifact
        uses: actions/download-artifact@v5.0.0
        with:
          merge-multiple: true
      - name: Check if artifact exist
        id: check_artifact
        shell: bash
        run: |
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-curseforge.zip ]; then
            echo 'No value found for artifact `curseforge.zip`.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-serverpack.zip ]; then
            echo 'No value found for artifact `serverpack.zip`.' && exit 1
          fi
          if [ ! -f ${{ needs.info.outputs.project_full_name }}-multimc.zip ]; then
            echo 'No value found for artifact `multimc.zip`.' && exit 1
          fi
      - name: Format diff
        id: format_diff
        if: ${{ needs.info.outputs.diff != '' }}
        uses: roamingowl/template-output-with-eta@v1.13.0
        with:
          template: |
            ```markdown
            ${{ needs.info.outputs.diff }}
            ```
      - name: Set release date variable
        id: release_date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Rename artifacts with tag and date
        run: |
          TAG="${{ needs.info.outputs.tag_name }}"
          DATE="${{ steps.release_date.outputs.date }}"
          mv "./build/curseforge/${{ needs.info.outputs.project_full_name }}-curseforge.zip" "./build/curseforge/${{ needs.info.outputs.project_name }}-${TAG}-${DATE}-curseforge.zip"
          mv "./build/modrinth/${{ needs.info.outputs.project_full_name }}-modrinth.mrpack" "./build/modrinth/${{ needs.info.outputs.project_name }}-${TAG}-${DATE}-modrinth.mrpack"
          mv "./build/serverpack/${{ needs.info.outputs.project_full_name }}-serverpack.zip" "./build/serverpack/${{ needs.info.outputs.project_name }}-${TAG}-${DATE}-serverpack.zip"
          mv "./build/multimc/${{ needs.info.outputs.project_full_name }}-multimc.zip" "./build/multimc/${{ needs.info.outputs.project_name }}-${TAG}-${DATE}-multimc.zip"
      - name: Create release
        id: release
        uses: softprops/action-gh-release@v2.3.3
        with:
          name: ${{ needs.info.outputs.tag_name }} (${{ steps.release_date.outputs.date }})
          tag_name: ${{ needs.info.outputs.tag_name }}
          target_commitish: ${{ github.sha }}
          body: |
            ${{ needs.info.outputs.changelog }}
            ${{ steps.format_diff.outputs.text }}
          files: |
            ./build/curseforge/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.tag_name }}-${{ steps.release_date.outputs.date }}-curseforge.zip
            ./build/modrinth/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.tag_name }}-${{ steps.release_date.outputs.date }}-modrinth.mrpack
            ./build/serverpack/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.tag_name }}-${{ steps.release_date.outputs.date }}-serverpack.zip
            ./build/multimc/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.tag_name }}-${{ steps.release_date.outputs.date }}-multimc.zip
          prerelease: ${{ needs.info.outputs.release_type != 'release' }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
